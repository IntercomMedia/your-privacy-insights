// Row
	// @param : Size of gutters between the columns in a row

@mixin row($gutter : 0, $width : null) {
	display: flex;
	max-width: $width;
	[class*='col'] {
		margin-right: $gutter;
		&:last-of-type {
			margin-right: 0;
		}
		
		> [class*='col'] {
			&:last-of-type {
				margin-bottom: 0;
			}
		}
		
		> .row {
			margin-bottom: 0;
		}
	}
	@include phone {
		flex-wrap: wrap;
	}
}

// Column
	// @param : Width of column

@mixin col($width : 100%, $padding : null, $display : block) {
	@include spacing($padding, padding);
	display: $display;
	width: $width;
	overflow: hidden;
	margin-left: auto;
	margin-right: auto;
	
	@include phone {
		width: 100%;
	}
}

// Spacing
	// @param : Size of spacing
	// @param : Type (Margin or Padding)
	// @param : Orientation (Vertical, Horizontal, All)

@mixin spacing($value : 0, $type : margin, $orientation : all) {
	// Vertical, Horizontal, All
	@if $orientation == vertical {
		#{ $type }-top: $value;
		#{ $type }-bottom: $value;
	} @else if $orientation == horizontal {
		#{ $type }-left: $value;
		#{ $type }-right: $value;
	} @else if $orientation == all {
		#{ $type }: $value;
	}
	// Top, Right, Bottom, Left
	@else if $orientation == top {
		#{ $type }-top: $value;
	} @else if $orientation == right {
		#{ $type }-right: $value;
	} @else if $orientation == bottom {
		#{ $type }-bottom: $value;
	} @else if $orientation == left {
		#{ $type }-left: $value;
	}
}

// Clear Margins
	// Preformatted content in a container throws off spacing within that container.
	// i.e. Heading tags have margins
	// There might be a better way to solve this problem, but here's a quick solution.

@mixin clear-margins {
	:first-child {
		margin-top: 0;
	}
	:last-child {
		margin-bottom: 0;
	}
}