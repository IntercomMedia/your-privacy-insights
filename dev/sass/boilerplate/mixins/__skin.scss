///////////////////////////////////////////////////

// Type Style

//////////////////////////////////////////////////

// @param : Font Family
// @param : Font Size, exponent of font ratio using 'fontsize' function
// @param : Color
// @param : Line Height
// @param : Caps (True or False)
// @param : Font Weight

@mixin type-style($config, $typeset: true) {
	$config: map-merge((
		font-family: null,
		font-size: 1,
		line-height: $baseline-ratio,
		margin-bottom: 1,
		font-weight: null,
		color: null,
		caps: false,
	), $config);
	
	font-size: fontsize(map-get($config, font-size));
	margin-top: 0;
	
	@if $typeset == true {
		
		// Define the line height
		$lineHeight: 0;
		@if map-get($config, line-height){
			$fontSize: fontsize(map-get($config, font-size), false) * map-get($config, line-height);
			$lineHeight: roundToBaseline($fontSize);
		} @else {
			$fontSize : map-get($config, font-size) * $baseline-ratio;
			$lineHeight: roundToBaseline($fontSize);
		}
		line-height: $lineHeight * 1rem;
		
		// Calculates the cap difference for each font pas`sed through this mixin
		$offSet: typeset(fontsize(map-get($config, font-size), false), $lineHeight);
		// Subtracts the value of typeset from the given bottom margin to account for the top padding
		$marginOffset: calc(#{baseline(map-get($config, margin-bottom))} - #{$offSet}); 
		// Get type to sit on the baseline by adjusting top padding and bottom margin based of from capDiff
		margin-bottom: $marginOffset;
		padding-top: $offSet;
		&:last-child,
		.clear-type {
			margin-bottom: calc(#{baseline(map-get($config, margin-bottom)/2)} - #{$offSet});
		}
	}

	@if map-get($config, font-family) {
		font-family: map-get($config, font-family);
	}

	@if map-get($config, font-weight) {
		font-weight: map-get($config, font-weight);
	}

	@if map-get($config, color) {
		color: map-get($config, color);
	}

	@if map-get($config, caps) {
		text-transform: uppercase;
	}
}

//////////////////////////////////////////////////

// Box Style

//////////////////////////////////////////////////

// @param : Background Color
// @param : Font Color
// @param : Border Radius
// @param : Shadow Style

@mixin box-style($background: null, $color: null, $corners: null, $depth: null) {
	background-color: $background;
	color: $color;
	border-radius: $corners;
	box-shadow: $depth;
	* {
		color: $color;
	}
}

//////////////////////////////////////////////////

// Border Style

//////////////////////////////////////////////////

// @param : Thickness of the border/outline
// @param : Color of border/outline
// @param : Position (All, Outline, Top, Right, Bottom, Left)
	// Note: Top and Bottom borders gives negative margin to the
	// top of the box in order to compensate for the baseline.

@mixin border-style($size: null, $color: null, $position: all) {
	@if $position == all {
		border: solid $size $color;
		margin-top: calc(#{$size} * -1);
	} @else if $position == outline {
		outline: solid $size $color;
	} @else if $position == top {
		border-top: solid $size $color;
		margin-top: calc(#{$size} * -1);
	} @else if $position == right {
		border-right: solid $size $color;
	} @else if $position == bottom {
		border-bottom: solid $size $color;
		margin-top: calc(#{$size} * -1);
	} @else if $position == left {
		border-left: solid $size $color;
	}
}