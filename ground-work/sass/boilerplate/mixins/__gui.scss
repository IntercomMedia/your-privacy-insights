//////////////////////////////////////////////////

// Button
	// -global button
	// @param : Width of Element
	// @param : Height of element
	// @param : Optional Transition

//////////////////////////////////////////////////

@mixin btn($typeProperties, $variationProperties, $hoverProperties) {
	// Map Defaults
	$config: map-merge(
		map-merge((
		height: null,
		width: null,
		type-style: p,
		transition: null,
		caps: false,
		padding: 1,
		background: null,
		cursor: pointer,
		color: null,
		corners: null,
		border-size: null,
		border-color: null,
	), $typeProperties), $variationProperties);
	
	// Defaults
	display: inline-flex;
	vertical-align: middle;
	align-items: center;
	justify-content: center;
	height: map-get($config, height);
	width: map-get($config, width);
	text-align: center;
	transition: map-get($config, transition);
	text-decoration: none;
	line-height: 1;
	
	// Conditionals
	@if map-get($config, padding) {
		padding: 0 baseline(map-get($config, padding));
	}
	@if map-get($config, type-style) {
		@include type-style(map-get($typoBody, #{map-get($config, type-style)}), $typeset: false);
	}
	@if map-get($config, border-size) {
		border-color: map-get($config, border-color);
		border-width: map-get($config, border-size);
		border-style: solid;
	} @else {	
		line-height: map-get($config, height);
	}
	@if map-get($config, background) or map-get($config, color) or map-get($config, corners) or map-get($config, depth){
		@include box-style($background: map-get($config, background), $color: map-get($config, color), $corners: map-get($config, corners), $depth: map-get($config, depth));
	}
	@if map-get($config, caps) == true {
		text-transform: uppercase;
	}
	@if map-get($config, cursor) {
		cursor: map-get($config, cursor);
	}

	&:hover {
		@if map-get($hoverProperties, border-size) {
			@include border-style($size: map-get($hoverProperties, border-size));
		}
		@if map-get($hoverProperties, background) or map-get($hoverProperties, color) {
			@include box-style($background: map-get($hoverProperties, background), $color: map-get($hoverProperties, color));
		}
		@if map-get($hoverProperties, border-color)  {
			$border-color: map-get($hoverProperties, border-color);
			border-color: $border-color;
		}
	}

	&.disabled {
		cursor: none;
	}
}

//////////////////////////////////////////////////

// Tool-tip
	// -global button
	// @param : Position of tooltip (top, right, bottom, left)
	// @param : Transition styling determined by the chosen theme variable

//////////////////////////////////////////////////

@mixin tool-tip($position: top, $transition: none, $background: color('black', 3), $color: color('white', 1)) {
	> span {
		background: $background;
		color: $color;
		visibility: hidden;
		position: absolute;
		@if $position == top {
			    bottom: 115%;
    			left: 50%;
				transform: translateX(-50%);
			&::after {
				top: 100%;
				right: 50%;
				transform: translateX(50%);
				border-color: $background transparent transparent transparent;
			}
		} @else if $position == right {
			bottom: 50%;
			left: 115%;
			transform: translateY(50%);
			&::after {
				bottom: 50%;
				right: 100%;
				transform: translateY(50%);
				border-color: transparent $background transparent transparent;
			}
		} @else if $position == bottom {
			right: 50%;
			top: 115%;
			transform: translateX(50%);
			&::after {
				bottom: 100%;
				right: 50%;
				transform: translateX(50%);
				border-color: transparent transparent $background transparent;
			}
		} @else if $position == left {
			bottom: 50%;
			right: 115%;
			transform: translateY(50%);
			&::after {
				bottom: 50%;
				left: 100%;
				transform: translateY(50%);
				border-color: transparent transparent transparent $background;
			}
		}
		
		&::after {
			content: ' ';
			position: absolute;
			border-width: baseline(1/4);
			border-style: solid;
		}
	}
	&:hover span {
		visibility: visible;
	}
}

//////////////////////////////////////////////////

// Progress

//////////////////////////////////////////////////

@mixin progress($progress: null) {
	
}

//////////////////////////////////////////////////

// Field

//////////////////////////////////////////////////

@mixin field {
	position: relative;
	&::before,
	&::after {
		content: ' ';
		position: absolute;
		left: 0;
		bottom: 0;
		height: line(s);
		width: 100%;
		background: color('white', 3);
		transition: all 0.2s;
	}
	
	&::after {
		width: 0;
		left: 50%;
		transform: translateX(-50%);
	}
	
	& > label{
		display: block;
		padding: 0 baseline(1/2);
		transform-origin: top left;
		line-height: baseline(1.5);
		transform: scale(1) translate3d(0, baseline(1.5), 0);
		transition: all 0.2s;	
	}
	
	label.is-active,
	&.is-filled label,
	&.is-focused label {
		color: color('black', 2);	
		transform: scale(0.9) translate3d(0, baseline(0.5), 0);
		
	}
	
	&.is-filled::after,
	&.is-focused::after {
			width: 100%;
			background: color('black', 2);
	}
	
	&.is-filled.is-valid::after,
	&.is-focused.is-valid::after,
	&.is-valid::after {
		width: 100%;
		background: color('success');
	}
	
	&.is-filled.is-error::after,
	&.is-focused.is-error::after,
	&.is-error::after {
		width: 100%;
		background: color('danger');
	}
	
	.icon {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 0;
		opacity: 0;
		transform: translateY(baseline(-1/2));
		visibility: hidden;
		transition : opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease
	}
	
	&.is-error .icon,
	&.is-valid .icon {
		opacity: 1;
		transform: translateY(0);
		visibility: visible;
	}
	
	&.is-error .icon::after {
		content: '\f05c';
		position: absolute;
		top: baseline(1);
		right: 0;
		transform: translate3d(-50%, -50%, 0);
		color: color('primary', 1);
	}
	
	&.is-valid .icon::after {
		content: '\f05d';
		position: absolute;
		top: baseline(1);
		transform: translate3d(-50%, -50%, 0);
		color: color('tertiary', 1);
	}
}

//////////////////////////////////////////////////

// Sprite

//////////////////////////////////////////////////