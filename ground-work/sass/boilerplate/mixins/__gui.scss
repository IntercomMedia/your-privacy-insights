//////////////////////////////////////////////////

// Button
	// Input
		// type-style : string
		// caps : boolean
		// height : size($key)
		// width : size($key)
		// padding : size($key)
		// color : color($key)
		// background-color : color($key)
		// border-size : size($key)
		// border-color : color($key)
		// border-radius : size($key)
		// depth : depth($key)
		// transition : transition($key)
		// cursor : css value
	// Output
		// .btn-[type]-[variation]

//////////////////////////////////////////////////

@mixin btn($properties, $defaults : false) {
	
	@if type-of($defaults) == map{
		$defaults: map-merge((
			padding: 0 map-get($properties, height)/2),
			$defaults);
	}
	
	// Output styles from map.
	@include output($properties, $defaults);
	
	// Ouput hover
	@if map-has-key($properties, hover) {
		&:hover {	
			$hover: map-get($properties, hover);
			@include output($hover);
		}
	}
	
	// Output States
	@if map-has-key($properties, states) {
		@each $key, $val in map-get($properties, states) {
			&.#{$key} {
				@include btn($val);
			}
			@if map-has-key($properties, hover) == false {
				&:hover {
					@include output($val);
				}
			}
		}
	}
}

//////////////////////////////////////////////////

// Tool-tip
	// -global button
	// @param : Position of tooltip (top, right, bottom, left)
	// @param : Transition styling determined by the chosen theme variable

//////////////////////////////////////////////////

@mixin tool-tip($position: top, $transition: none, $background: color(dark, 3), $color: color(light, 1)) {
	> span {
		background: $background;
		color: $color;
		visibility: hidden;
		position: absolute;
		@if $position == top {
			    bottom: 115%;
    			left: 50%;
				transform: translateX(-50%);
			&::after {
				top: 100%;
				right: 50%;
				transform: translateX(50%);
				border-color: $background transparent transparent transparent;
			}
		} @else if $position == right {
			bottom: 50%;
			left: 115%;
			transform: translateY(50%);
			&::after {
				bottom: 50%;
				right: 100%;
				transform: translateY(50%);
				border-color: transparent $background transparent transparent;
			}
		} @else if $position == bottom {
			right: 50%;
			top: 115%;
			transform: translateX(50%);
			&::after {
				bottom: 100%;
				right: 50%;
				transform: translateX(50%);
				border-color: transparent transparent $background transparent;
			}
		} @else if $position == left {
			bottom: 50%;
			right: 115%;
			transform: translateY(50%);
			&::after {
				bottom: 50%;
				left: 100%;
				transform: translateY(50%);
				border-color: transparent transparent transparent $background;
			}
		}
		
		&::after {
			content: ' ';
			position: absolute;
			border-width: baseline(1/4);
			border-style: solid;
		}
	}
	&:hover span {
		visibility: visible;
	}
}

//////////////////////////////////////////////////

// Progress

//////////////////////////////////////////////////

@mixin progress($progress: null) {
	
}

//////////////////////////////////////////////////

// Field

//////////////////////////////////////////////////

@mixin field {
	position: relative;
	&::before,
	&::after {
		content: ' ';
		position: absolute;
		left: 0;
		bottom: 0;
		height: line(s);
		width: 100%;
		background: color(light, 3);;
		transition: all 0.2s;
	}
	
	&::after {
		width: 0;
		left: 50%;
		transform: translateX(-50%);
	}

	
	& > label{
		display: block;
		padding: 0 baseline(1/2);
		transform-origin: top left;
		line-height: baseline(1.5);
		transform: scale(1) translate3d(0, baseline(1.5), 0);
		transition: all 0.2s;	
	}
	
	label.is-active,
	&.is-filled label,
	&.is-focused label {
		color: color(dark, 2);
		transform: scale(0.9) translate3d(0, baseline(0.5), 0);
		
	}
	
	&.is-filled::after,
	&.is-focused::after {
			width: 100%;
			background: color(dark, 2);
	}
	
	&.is-filled.is-valid::after,
	&.is-focused.is-valid::after,
	&.is-valid::after {
		width: 100%;
		background: color(success);
	}
	
	&.is-filled.is-error::after,
	&.is-focused.is-error::after,
	&.is-error::after {
		width: 100%;
		background: color(danger);
	}
	
	.field-select-icon {
		position: absolute;
		top: 50%;
		right: baseline(1);
		font-size: baseline(1);
		transform: translateY(-50%);
		transition : opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
		color: color(neutral, 1);
		z-index: -1;
	}
	
	&.is-focused .field-select-icon {
		transform: translateY(-45%);
		color: color(primary, 1);
	}
	
	.field-icon {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 0;
		opacity: 0;
		transform: translateY(baseline(-1/2));
		visibility: hidden;
		transition : opacity 0.3s ease, visibility 0.3s ease, transform 0.3s ease;
	}
	
	&.is-error .field-icon,
	&.is-valid .field-icon {
		opacity: 1;
		transform: translateY(0);
		visibility: visible;
	}
	
	&.is-error .field-icon::after {
		content: '\f05c';
		position: absolute;
		top: baseline(1);
		right: 0;
		transform: translate3d(-50%, -50%, 0);
		color: color(primary,1);
	}
	
	&.is-valid .field-icon::after {
		content: '\f05d';
		position: absolute;
		top: baseline(1);
		transform: translate3d(-50%, -50%, 0);
		color: color(tertiary, 1);
	}
	
	.field-tooltip {
		position: absolute;
		left: 50%;
		top:90%;
		padding: size(s);
		color: color(light, 1);
		background: color(dark, 1);
		transition : transition(all);
		transform: translateX(-50%);
		opacity: 0;
		visibility: hidden;
		z-index: 10;
	}
	
	&.is-error.is-focused .field-tooltip {
		top:100%;
		opacity: 1;
		visibility: visible;
	}
}

//////////////////////////////////////////////////

// Sprite

//////////////////////////////////////////////////