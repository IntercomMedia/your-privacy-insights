@mixin flex-me {
	display: flex;
}

// Center Row
	// Center items inside of a horizontal element

@mixin center-row {
	@include flex-me;
	justify-content: center;
	align-items: center;
}

// Center Column
	// Center items inside of a vertical element

@mixin center-column {
	@include flex-me;
	@include center-row;
	flex-direction: column;
}

// Absolute Position
	// @param : Position (top, top-right, right-top, right, right-bottom, bottom-right, bottom, bottom-left, left-bottom, left, left-top, top-left)

@mixin position($type: absolute, $position: null) {
	// Type of Positioning
	@if $type == absolute {
		position: absolute;
	} @else if $type == fixed {
		position: fixed;
	}
	
	// Position
	@if $position == top {
		top: 0;
	} @else if $position == top-right {
		top: 0;
		right: 0;		
	} @else if $position == right {
		right: 0;
	} @else if $position == bottom-right {
		bottom: 0;
		right: 0;
	} @else if $position == bottom {
		bottom: 0;
	} @else if $position == bottom-left {
		bottom: 0;
		left: 0;
	} @else if $position == left {
		left: 0;
	} @else if $position == top-left {
		top: 0;
		left: 0;
	}
}

// Easily fix clear issue with floating elements

@mixin clear-fix {
	&::after {
		content: ' ';
		display: block;
		clear: both;
		width: 100%;
		height: 1px;
	}
}

// output
	// Parses map and outputs raw css styles from key: value
	
@mixin output($props, $defaults: false) {
	
	@if type-of($defaults) == map {
		$props: map-merge($defaults, $props);
	}
	
	// Conditionals
	@each $prop, $style in $props {		
		@if $prop == 'type-style' {
			@include type-style(map-get($typography, $style), $typeset: false);
		}@else if $prop == 'before'{
			&::before {
				@each $be-prop, $be-style in $style {
					#{$be-prop} :  $be-style;
				}
			}
		}@else if $prop == 'after' {
			&::after {
				@each $af-prop, $af-style in $style {
						#{$af-prop} :  $af-style;
				}
			}
		}@else if(type-of($style) != map) {
			#{$prop} : $style;
		}
	}
}